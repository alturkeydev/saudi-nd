{"version":3,"sources":["components/Logo/Logo.js","components/Title/Title.js","containers/App.js","serviceWorker.js","index.js","components/Logo/iris.png","containers/kings.png"],"names":["Logo","className","options","max","style","margin","height","width","paddingTop","alt","src","iris","Title","particlesOptions","particles","number","value","density","enable","value_area","fxProps","count","interval","colors","calc","props","i","x","window","innerWidth","y","Math","random","App","onDayChange","event","setState","day","target","onMonthChange","month","check","state","route","alert","snd","Date","getFullYear","this","params","onChange","placeholder","type","id","onClick","display","kings","marginLeft","marginRight","parseInt","visibility","autoPlay","loop","showSkipControls","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.a4f1a77d.chunk.js","sourcesContent":["import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport './Logo.css';\r\nimport iris from './iris.png';\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className='ma4'>\r\n      <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 55 }} style={{ margin: \"auto\", height: 220, width: 200 }} >\r\n        <div className=\"Tilt-inner pa3\">\r\n          <img style={{paddingTop: '5px'}} alt='logo' src={iris}/>\r\n        </div>\r\n      </Tilt>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport './Title.css'\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"white f2 pb3 pt6 fw6\">\r\n      <p style={{margin: 'auto'}} className=\"title pa2 br2 shadow-2\">ولدت السعُودية الْعُظمى في</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React, { Component } from 'react';\r\nimport Logo from '../components/Logo/Logo';\r\nimport Title from '../components/Title/Title';\r\nimport Particles from 'react-particles-js';\r\nimport { Fireworks } from 'fireworks/lib/react';\r\nimport AudioPlayer from 'react-h5-audio-player';\r\nimport 'react-h5-audio-player/lib/styles.css';\r\nimport kings from './kings.png';\r\nimport './App.css';\r\n\r\nconst particlesOptions = {\r\n  particles: {\r\n    number: {\r\n      value: 100,\r\n      density: {\r\n        enable: true,\r\n        value_area: 800\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nlet fxProps = {\r\n   count: 5,\r\n   interval: 300,\r\n   colors: ['#1FA437', '#FFCF01', '#E62A27'],\r\n   calc: (props, i) => ({\r\n     ...props,\r\n     x: (i + 1) * (window.innerWidth / 5) - (i + 1) * 50,\r\n     y: 200 + Math.random() * 100 - 50 + (i === 2 ? -80 : 0)\r\n   })\r\n }\r\n\r\nclass App extends Component {\r\nconstructor(props) {\r\n  super(props);\r\n  this.state = {\r\n      route: 'default',\r\n      day: 0,\r\n      month: 0\r\n    }\r\n  }\r\n\r\n  onDayChange = (event) => {\r\n     this.setState({day: event.target.value})\r\n  }\r\n\r\n  onMonthChange = (event) => {\r\n      this.setState({month: event.target.value})\r\n  }\r\n\r\n  check = () => {\r\n    if (this.state.day === '23' && this.state.month === '9') {\r\n      this.setState({route: 'correct'});\r\n    } else {\r\n      alert('الرجاء إدخال تاريخ صحيح');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let snd = new Date().getFullYear();\r\n    const { route } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <Particles params={particlesOptions} className='particles' />\r\n        <Logo />\r\n        { route === 'default'\r\n          ?\r\n          <div>\r\n            <Title />\r\n              <div className=\"pt6\">\r\n                <input onChange={this.onMonthChange} placeholder=\"الشهر الميلادي\" type=\"text\" id=\"month\"  className=\"input-reset white f5 pa2 ba hover-bg-white b green\"/>\r\n                <strong className=\"f3 white\">/</strong>\r\n                <input onChange={this.onDayChange} placeholder=\"اليوم الميلادي\" type=\"text\" id=\"day\" className=\"input-reset white f5 pa2 ba hover-bg-white b green\"/>\r\n              </div>\r\n              <input onClick={this.check} type=\"submit\" value=\"تحقق\" className=\"mt4 b ph3 pv2 input-reset greenButton grow pointer f5 dib\"/>\r\n            </div>\r\n            :\r\n        ( route === 'correct'\r\n          ?\r\n          <div className=\"white f2 pb3 pt3 fw6\">\r\n            <Fireworks {...fxProps} />\r\n            <div className=\"f2 pb3 pt4 fw6 mb5\">\r\n              <p style={{margin: 'auto', width: \"50%\", display: 'block'}}>\r\n                <img src={kings} alt=\"kings\" className=\"pb5\" style={{ marginLeft: 'auto', marginRight: 'auto', width: \"70%\", display: 'block' }}/>\r\n                اليوم الوطني السعودي <strong className=\"snd\">{parseInt(snd) - 1930}</strong>\r\n              </p>\r\n            </div>\r\n            <div style={{visibility: 'hidden'}}>\r\n              <AudioPlayer\r\n                className=\"w-30 center\"\r\n                autoPlay=\"true\"\r\n                loop=\"true\"\r\n                showSkipControls\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/6/6d/Saudi_Arabian_national_anthem%2C_performed_by_the_United_States_Navy_Band.oga\"\r\n              />\r\n            </div>\r\n          </div>\r\n          :\r\n          <p className=\"white f2\" style={{margin: 'auto', width: \"50%\", display: 'block'}}>خطاء</p>\r\n        )\r\n      }\r\n      <footer className=\"pt5 pb6 b white f4\">By Younes | FCIT</footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <App />\r\n  , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/iris.1c9d6e86.png\";","module.exports = __webpack_public_path__ + \"static/media/kings.3185ee1b.png\";"],"sourceRoot":""}